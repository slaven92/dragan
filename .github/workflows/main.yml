# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        default: 'warning'
    

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Cache multiple paths
        uses: actions/cache@v2
        id: node-cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-nodes-${{ hashFiles('./vue-web/package-lock.json') }}
      
      
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        if: steps.node-cache.outputs.cache-hit != 'true'
      - run: |
            cd vue-web
            npm install
            cd ..
       
       
      - name: Build Vue files and add them in Django
        run: |
            cd vue-web
            npm run build
            cd ..
            python3 build.py
      
      
      
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      
#       - name: Builder instance name
#         run: echo ${{ steps.buildx.outputs.name }}
      
#       - name: Available platforms
#         run: echo ${{ steps.buildx.outputs.platforms }}
      
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@adb73476b6e06caddec5db0bc1deacbec8cdd947
        uses: docker/login-action@v1.6.0
        with:
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      
      
      - name: Build and cache
#         run: |
#           docker buildx build -t "slaven92/dragan:latest" --platform linux/amd64,linux/arm/v7 --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache-no-buildkit --push .
        run: |
          docker buildx build -t "slaven92/dragan:latest" --platform linux/amd64,linux/arm/v7 --cache-to="slaven92/dragan:cache" --cache-from="slaven92/dragan:cache" --push .
#         run: |
#           echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
#           docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache-no-buildkit || true
#           docker buildx build -t "slaven92/dragan:latest" --platform linux/amd64,linux/arm/v7 --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache-no-buildkit --push .
#           docker tag "slaven92/dragan:latest" docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache-no-buildkit
#           docker push docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache-no-buildkit || true
      
      
#       # Runs a single command using the runners shell
#       - name: Build docker images
#         run: docker buildx build -t "slaven92/dragan:latest" --platform linux/amd64,linux/arm/v7 --push .
# #         run: docker buildx build -t "slaven92/dragan:latest" --platform linux/arm/v7 --push .
      
      
      
      # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
