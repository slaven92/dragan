{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Result","props","useState","isSet","setIsSet","result","setResult","useEffect","listOfAnswers","answers","lookup","response","status","className","src","alt","href","onClick","Question","text","question","question_text","choice_set","creator","votes","Answers","icon","regular","map","item","index","key","type","choice_text","solid","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","onload","onerror","e","console","log","send","App","questions","setQuestions","isEnd","setIsEnd","currentQuestion","setCurrentQuestion","setAnswers","elem","tmpAswers","tmpObj","answer","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e588454a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart as regular } from '@fortawesome/free-regular-svg-icons'\nimport { faHeart as solid } from '@fortawesome/free-solid-svg-icons'\n\n\nfunction App() {\n  const [questions, setQuestions] = useState([])\n  const [isEnd, setIsEnd] = useState(false)\n  const [isSet, setIsSet] = useState(false)\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [answers, setAnswers] = useState([])\n  useEffect(() => {\n    if (isSet === false) {\n      loadQuestions((response, status) => {\n        setQuestions([...response])\n        setIsSet(true)\n      })\n    }\n\n  }, [isSet])\n\n  const answerClicked = (elem) => {\n    var tmpAswers = [...answers]\n    var tmpObj = {\n      answer: elem,\n      question: questions[currentQuestion].question_text,\n    }\n    tmpAswers.push(tmpObj)\n    setAnswers(tmpAswers)\n    setCurrentQuestion(currentQuestion + 1)\n    if (currentQuestion === questions.length - 1) {\n      setIsEnd(true)\n    }\n  }\n\n  const refresh = () => {\n    if(isSet===true){\n      setIsSet(false)\n      setCurrentQuestion(0)\n    }\n  }\n\n\n  if (isSet === true) {\n\n\n    if (isEnd === true) {\n      return (\n        <div className='mx-auto'>\n          <Result answers={answers} onClick={refresh} />\n        </div>\n      )\n    }\n    return <Question question={questions[currentQuestion]} onClick={answerClicked} />\n\n\n  } else return <div>Loading</div>\n\n}\n\nfunction Result(props) {\n\n  const [isSet, setIsSet] = useState(false)\n  const [result, setResult] = useState(\"\")\n\n  useEffect(() => {\n    postAnswer(props.answers, (response, status) => {\n      setIsSet(true)\n      setResult(response.result)\n    })\n  }, [props.answers])\n\n  if (isSet === true) {\n    return (\n      <div className='row justify-content-center'>\n        <div className='col-sx'>\n          <div className=\"card\">\n            <img className=\"card-img-top\" src={`/static/kviz/${result}.jpeg`} alt=\"Responsive\" />\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{result}</h5>\n              <p className=\"card-text\">Ovo je jedan od mnogih verzija Dragana.</p>\n              <a href=\"/\" onClick={()=>props.onClick()} className=\"btn btn-primary\">Pocni opet</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  } else return <div>Loading</div>\n}\n\nfunction Question(props) {\n  const text = props.question ? props.question.question_text : ''\n  const answers = props.question ? props.question.choice_set : []\n  const creator = props.question ? props.question.creator : \"\"\n  const votes = props.question ? props.question.votes : 0\n  // const func = props.question ? props.question.onClick : ()=>{}\n  return (\n    <div>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-sm\">\n          <div className=\"border\">\n            <div className=\"border my-3\">\n              <p className=\"h1 text-center\">{text}</p>\n            </div>\n            <div className=\"border mt-3\">\n              <Answers answers={answers} onClick={props.onClick} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className='row justify-content-between'>\n        <div className=\"col-auto\">\n          <p> Pitanje postavio: {creator}</p>\n        </div>\n        <div className=\"col-2\">\n          <button className=\"btn btn-dark btn-block\">\n            <FontAwesomeIcon icon={regular} /> <span className='badge badge-primary'>{votes}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Answers(props) {\n  return props.answers.map((item, index) => {\n    return (\n      <div className=\"mx-auto m-6 border\" key={index}>\n        <button type='button' className=\"btn btn-outline-primary btn-lg btn-block\" onClick={() => props.onClick(item.choice_text)}>\n          {item.choice_text}({item.votes}<FontAwesomeIcon icon={solid} />)\n        </button>\n      </div>\n    )\n  })\n}\n\n\n\n\nfunction lookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest()\n  const url = `/api${endpoint}`\n  xhr.responseType = \"json\"\n  xhr.open(method, url)\n  const csrftoken = getCookie('csrftoken');\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUEST_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n  }\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function (e) {\n    console.log(e)\n    callback({ \"message\": \"Ne radi\" }, 400)\n  }\n  xhr.send(jsonData)\n}\n\nfunction getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nfunction postAnswer(listOfAnswers, callback) {\n  lookup(\"POST\", \"/submit/\", callback, listOfAnswers)\n}\n\nfunction loadQuestions(callback) {\n  lookup(\"GET\", \"/questions/\", callback)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}